{"name": "test_signup[chrome-BMW-BMW Cars]", "status": "broken", "statusDetails": {"message": "IndexError: list index out of range", "trace": "self = <Testcases.test_carwale.Test_Carwale.TestSign object at 0x10823b610>\ncard_brand = 'BMW', car_title = 'BMW Cars'\n\n    @pytest.mark.parametrize(\"card_brand,car_title\",\n                             dataProvider.get_data(\"NewCarTest\"))\n    def test_signup(self, card_brand, car_title):\n        log.logger.info(\"*************Inside select card tests **********\")\n        home = HomePage(self.driver)\n        car = car_Base(self.driver)\n        if card_brand == 'BMW':\n            home.newCarPage().selectBmw()\n            title = car.get_car_title()\n            assert title == car_title, \"Cars Title are not matching\"\n>           car.get_car_names_prices()\n\nTestcases/test_carwale.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Pages.CarBasePage.car_Base object at 0x10828f760>\n\n    def get_car_names_prices(self):\n        carname = self.driver.find_elements(By.XPATH, configReader.readConfig(\"locators\",\"carname_XPATH\"))\n        carprice = self.driver.find_elements(By.XPATH, configReader.readConfig(\"locators\",\"carprice_XPATh\"))\n    \n        for i in range(1,5):\n>           print(\"Car Name is \"+carname[i].text+\" And the price is \"+carprice[i].text)\nE           IndexError: list index out of range\n\nPages/CarBasePage.py:20: IndexError"}, "attachments": [{"name": "log", "source": "27e9f02e-e845-41f3-a354-6e19782aeea6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser1", "value": "'chrome'"}, {"name": "card_brand", "value": "'BMW'"}, {"name": "car_title", "value": "'BMW Cars'"}], "start": 1663651397046, "stop": 1663651415486, "uuid": "4feb7f80-922f-4b98-a1ab-5cc1d37a51c6", "historyId": "dd3f2d6988861f620662807a265c5ce7", "testCaseId": "360cd4257b44999f05e12bca64f69c2d", "fullName": "Testcases.test_carwale.Test_Carwale#test_signup", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser1')"}, {"name": "parentSuite", "value": "Testcases"}, {"name": "suite", "value": "test_carwale"}, {"name": "subSuite", "value": "Test_Carwale"}, {"name": "host", "value": "C02WQ0K1G8WN"}, {"name": "thread", "value": "12892-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.test_carwale"}]}